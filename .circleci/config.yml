version: 2.1
orbs:
  slack: circleci/slack@4.10.1

commands:
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update 
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
            
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
               sudo  ./aws/install
  

  destroy-environment: #step for create destroy-environment
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
  
  
  
  revert-migrations: #this steps  for create migrations 
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/Up68KQvVZCMC32AM4i2mJR/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/projects/backend
              npm install
              npm run migration:revert
            fi         

  install_nodejs:
    description: "This command installs NodeJS on the docker image"
    steps:
      - run:
          name: "Installing node js"
          command: |
           sudo apt-get update  
           sudo apt-get upgrade

            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo apt-get install gcc g++ make






           
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm test
     

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm test
      
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --force 
            npm audit fix --audit-level=critical --force
 
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --force 
            npm audit fix --audit-level=critical --force
            
  test-ba:
    docker:
      - image: python:3.7-alpine3.11
    steps:
        - run:
              name: Install curl
              command: |
                 apk add curl
      
#
#
#  deploy-infrastructure:
#    docker:
#      - image: amazon/aws-cli
#    steps:
#      - checkout
#      - run:
#          name: Install tar utility
#          command: |
#            yum install -y tar gzip      
#      - run:
#          name: Ensure back-end infrastructure exists
#          command: |
#            aws cloudformation deploy \
#              --template-file .circleci/files/backend.yml \
#              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
#              --tags project=udapeople
#              
#      - run:
#          name: Ensure front-end infrastructure exist
#          command: |
#            aws cloudformation deploy \
#              --template-file .circleci/files/frontend.yml \
#              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
#              --tags project=udapeople
#      - run:
#          name: Add back-end ip to ansible inventory
#          command: |
#            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
#              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#              --query 'Reservations[*].Instances[*].PublicIpAddress' \
#              --output text)
#            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
#            cat .circleci/ansible/inventory.txt 
#      - persist_to_workspace:
#          root: ~/
#          paths:
#            - project/.circleci/ansible/inventory.txt
#      - destroy-environment
#
#  
#  configure-infrastructure:
#      docker:
#        - image: cimg/base:stable
#      steps:
#        - checkout
#        - install_awscli 
#        - install_ansible
#        - add_ssh_keys:
#            fingerprints: ["56:2d:73:06:5f:21:a3:0a:cf:90:60:78:2d:51:b1:ba"]
#                 
#        - attach_workspace:
#            at: ~/
#        - run:
#            name: Configure server
#            command: |
#              cd .circleci/ansible
#              cat inventory.txt
#              ansible-playbook -i inventory.txt configure-server.yml 
#          #  ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt    
#        
#        - destroy-environment
#

  
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - install_awscli 
             
      - run: 
          name: Run migrations
          command: |
            cd backend 
            npm install
           
            npm run migrations > migrations_dump.txt
          #  npm audit fix --force 
         #  npm audit fix --audit-level=critical --force
            

      #      npm audit fix --audit-level=critical --force
       #     npm audit fix --force 
        #    npm run migrations > migrations_dump.txt
          #         npm audit fix --audit-level=critical --force
     # - run: 
      #    name: Send Migration Results to kvdb.io
       #   command: |
          #    # If you are using kvdb.io, generate the bucket ID "Up68KQvVZCMC32AM4i2mJR" in your local terminal first
           #   curl -d '1' https://kvdb.io/Up68KQvVZCMC32AM4i2mJR/migration_${CIRCLE_WORKFLOW_ID:0:7}  
           # fi
     #- revert-migrations
      - destroy-environment
  
#  deploy-frontend:
#    docker:
#      - image: cimg/base:stable
#    steps:
#      - checkout
#      - install_awscli  
#      - install_nodejs
#      - install_ansible
#     # - run: sudo apt-get install tar gzip -y
#      - restore_cache:
#          keys: [backend-build]
#      
#      
#      - run:
#          name: Install dependencies
#          command: |
#            cd frontend
#            npm install
#      - run:
#          name: Get backend url
#          command: |
#           BACKEND_IP=$(aws ec2 describe-instances \
#            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#            --query 'Reservations[*].Instances[*].PublicIpAddress' \
#            --output text)
#            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
#            cat frontend/.env
#      - run:
#          name: Deploy frontend objects
#          command: |
#            cd frontend
#            npm install
#            npm run build
#            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
#            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
#      - destroy-environment
#
#  deploy-backend:
#    docker:
#      - image: cimg/base:stable
#     # cimg/base:2022.04
#    steps:
#      - checkout
#      - install_awscli
#      - install_ansible
#      - install_nodejs
#      - add_ssh_keys:
#            fingerprints: ["56:2d:73:06:5f:21:a3:0a:cf:90:60:78:2d:51:b1:ba"]
#     
#     
#      - attach_workspace:
#            at: ~/
#      
#      - restore_cache:
#          keys: [backend-build]
#      
#      - run:
#          name: package backend
#          command: |
#             cd backend
#             npm run build
#             tar -czf artifact.tar.gz dist/* package*
#             cd ..
#             cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
#      - run:
#          name: Deploy backend
#          command: |
#            export TYPEORM_MIGRATIONS_DIR=./migrations
#            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
#            export TYPEORM_MIGRATIONS=./migrations/*.ts
#            cd .circleci/ansible
#            cat inventory.txt
#            ansible-playbook -i inventory.txt deploy-backend.yml
#      - destroy-environment
#      
#



workflows:
  default:
    jobs:
     # - test-ba
       - build-backend
       - build-frontend
       - test-frontend:
          requires: [build-frontend] 
       - test-backend:
          requires: [build-backend]      
       - scan-backend:
          requires: [test-backend]
       - scan-frontend :
          requires: [test-frontend]          
    #   - deploy-infrastructure  :
     #     requires: [test-frontend, test-backend,scan-frontend, scan-backend]
      # - configure-infrastructure:
       #   requires: [deploy-infrastructure]    
       - run-migrations:
          requires: [test-frontend, test-backend,scan-frontend, scan-backend]
    #      requires: [configure-infrastructure]
     #  - deploy-frontend:
     #     requires: [run-migrations]
     #  - deploy-backend:
     #     requires: [run-migrations]